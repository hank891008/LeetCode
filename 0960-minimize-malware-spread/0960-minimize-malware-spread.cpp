class Solution {
public:
    int fa[305], sz[305];
    void init(int n){
        for(int i = 0; i < n; i++){
            fa[i] = i;
            sz[i] = 1;
        }
    }
    int findr(int x){
        return x == fa[x] ? fa[x] : fa[x] = findr(fa[x]);
    }
    bool unite(int x, int y){
        x = findr(x);
        y = findr(y);
        if(x == y){
            return false;
        }
        fa[x] = y;
        sz[y] += sz[x];
        return true;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        init(n);
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(graph[i][j]){
                    unite(i, j);
                }
            }
        }
        vector<int> malware(n, 0);
        sort(initial.begin(), initial.end());
        for(auto i: initial){
            malware[findr(i)]++;
        }
        vector<int> ans = {initial[0], 0};
        for(auto i: initial){
            int fa = findr(i);
            if(malware[fa] == 1){
                if(sz[fa] > ans[1] || ((sz[fa] == ans[1]) && i < ans[0])){
                    ans[0] = i;
                    ans[1] = sz[fa];
                }
            }
        }
        return ans[0];
    }
};